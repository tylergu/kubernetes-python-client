# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kubernetes.client.models.v1beta3_flow_schema import V1beta3FlowSchema

class TestV1beta3FlowSchema(unittest.TestCase):
    """V1beta3FlowSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta3FlowSchema:
        """Test V1beta3FlowSchema
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1beta3FlowSchema`
        """
        model = V1beta3FlowSchema()
        if include_optional:
            return V1beta3FlowSchema(
                api_version = '',
                kind = '',
                metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = kubernetes.client.models.v1beta3/flow_schema_spec.v1beta3.FlowSchemaSpec(
                    distinguisher_method = kubernetes.client.models.v1beta3/flow_distinguisher_method.v1beta3.FlowDistinguisherMethod(
                        type = '', ), 
                    matching_precedence = 56, 
                    priority_level_configuration = kubernetes.client.models.v1beta3/priority_level_configuration_reference.v1beta3.PriorityLevelConfigurationReference(
                        name = '', ), 
                    rules = [
                        kubernetes.client.models.v1beta3/policy_rules_with_subjects.v1beta3.PolicyRulesWithSubjects(
                            non_resource_rules = [
                                kubernetes.client.models.v1beta3/non_resource_policy_rule.v1beta3.NonResourcePolicyRule(
                                    non_resource_urls = [
                                        ''
                                        ], 
                                    verbs = [
                                        ''
                                        ], )
                                ], 
                            resource_rules = [
                                kubernetes.client.models.v1beta3/resource_policy_rule.v1beta3.ResourcePolicyRule(
                                    api_groups = [
                                        ''
                                        ], 
                                    cluster_scope = True, 
                                    namespaces = [
                                        ''
                                        ], 
                                    resources = [
                                        ''
                                        ], 
                                    verbs = [
                                        ''
                                        ], )
                                ], 
                            subjects = [
                                kubernetes.client.models.v1beta3/subject.v1beta3.Subject(
                                    group = kubernetes.client.models.v1beta3/group_subject.v1beta3.GroupSubject(
                                        name = '', ), 
                                    kind = '', 
                                    service_account = kubernetes.client.models.v1beta3/service_account_subject.v1beta3.ServiceAccountSubject(
                                        name = '', 
                                        namespace = '', ), 
                                    user = kubernetes.client.models.v1beta3/user_subject.v1beta3.UserSubject(
                                        name = '', ), )
                                ], )
                        ], ),
                status = kubernetes.client.models.v1beta3/flow_schema_status.v1beta3.FlowSchemaStatus(
                    conditions = [
                        kubernetes.client.models.v1beta3/flow_schema_condition.v1beta3.FlowSchemaCondition(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            reason = '', 
                            status = '', 
                            type = '', )
                        ], )
            )
        else:
            return V1beta3FlowSchema(
        )
        """

    def testV1beta3FlowSchema(self):
        """Test V1beta3FlowSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
