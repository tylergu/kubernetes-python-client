# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kubernetes.client.models.v1_pod_affinity import V1PodAffinity

class TestV1PodAffinity(unittest.TestCase):
    """V1PodAffinity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1PodAffinity:
        """Test V1PodAffinity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1PodAffinity`
        """
        model = V1PodAffinity()
        if include_optional:
            return V1PodAffinity(
                preferred_during_scheduling_ignored_during_execution = [
                    kubernetes.client.models.v1/weighted_pod_affinity_term.v1.WeightedPodAffinityTerm(
                        pod_affinity_term = kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                            label_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                                match_expressions = [
                                    kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            match_label_keys = [
                                ''
                                ], 
                            mismatch_label_keys = [
                                ''
                                ], 
                            namespace_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(), 
                            namespaces = [
                                ''
                                ], 
                            topology_key = '', ), 
                        weight = 56, )
                    ],
                required_during_scheduling_ignored_during_execution = [
                    kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                        label_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), 
                        match_label_keys = [
                            ''
                            ], 
                        mismatch_label_keys = [
                            ''
                            ], 
                        namespace_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(), 
                        namespaces = [
                            ''
                            ], 
                        topology_key = '', )
                    ]
            )
        else:
            return V1PodAffinity(
        )
        """

    def testV1PodAffinity(self):
        """Test V1PodAffinity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
