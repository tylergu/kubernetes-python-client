# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kubernetes.client.models.v1_affinity import V1Affinity

class TestV1Affinity(unittest.TestCase):
    """V1Affinity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1Affinity:
        """Test V1Affinity
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1Affinity`
        """
        model = V1Affinity()
        if include_optional:
            return V1Affinity(
                node_affinity = kubernetes.client.models.v1/node_affinity.v1.NodeAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        kubernetes.client.models.v1/preferred_scheduling_term.v1.PreferredSchedulingTerm(
                            preference = kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm(
                                match_expressions = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_fields = [
                                    kubernetes.client.models.v1/node_selector_requirement.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', )
                                    ], ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = kubernetes.client.models.v1/node_selector.v1.NodeSelector(
                        node_selector_terms = [
                            kubernetes.client.models.v1/node_selector_term.v1.NodeSelectorTerm()
                            ], ), ),
                pod_affinity = kubernetes.client.models.v1/pod_affinity.v1.PodAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        kubernetes.client.models.v1/weighted_pod_affinity_term.v1.WeightedPodAffinityTerm(
                            pod_affinity_term = kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                                label_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                                    match_expressions = [
                                        kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                match_label_keys = [
                                    ''
                                    ], 
                                mismatch_label_keys = [
                                    ''
                                    ], 
                                namespace_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(), 
                                namespaces = [
                                    ''
                                    ], 
                                topology_key = '', ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = [
                        kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                            topology_key = '', )
                        ], ),
                pod_anti_affinity = kubernetes.client.models.v1/pod_anti_affinity.v1.PodAntiAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        kubernetes.client.models.v1/weighted_pod_affinity_term.v1.WeightedPodAffinityTerm(
                            pod_affinity_term = kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                                label_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                                    match_expressions = [
                                        kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                match_label_keys = [
                                    ''
                                    ], 
                                mismatch_label_keys = [
                                    ''
                                    ], 
                                namespace_selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(), 
                                namespaces = [
                                    ''
                                    ], 
                                topology_key = '', ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = [
                        kubernetes.client.models.v1/pod_affinity_term.v1.PodAffinityTerm(
                            topology_key = '', )
                        ], )
            )
        else:
            return V1Affinity(
        )
        """

    def testV1Affinity(self):
        """Test V1Affinity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
