# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from kubernetes.client.models.v1beta3_flow_schema_spec import V1beta3FlowSchemaSpec

class TestV1beta3FlowSchemaSpec(unittest.TestCase):
    """V1beta3FlowSchemaSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V1beta3FlowSchemaSpec:
        """Test V1beta3FlowSchemaSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V1beta3FlowSchemaSpec`
        """
        model = V1beta3FlowSchemaSpec()
        if include_optional:
            return V1beta3FlowSchemaSpec(
                distinguisher_method = kubernetes.client.models.v1beta3/flow_distinguisher_method.v1beta3.FlowDistinguisherMethod(
                    type = '', ),
                matching_precedence = 56,
                priority_level_configuration = kubernetes.client.models.v1beta3/priority_level_configuration_reference.v1beta3.PriorityLevelConfigurationReference(
                    name = '', ),
                rules = [
                    kubernetes.client.models.v1beta3/policy_rules_with_subjects.v1beta3.PolicyRulesWithSubjects(
                        non_resource_rules = [
                            kubernetes.client.models.v1beta3/non_resource_policy_rule.v1beta3.NonResourcePolicyRule(
                                non_resource_urls = [
                                    ''
                                    ], 
                                verbs = [
                                    ''
                                    ], )
                            ], 
                        resource_rules = [
                            kubernetes.client.models.v1beta3/resource_policy_rule.v1beta3.ResourcePolicyRule(
                                api_groups = [
                                    ''
                                    ], 
                                cluster_scope = True, 
                                namespaces = [
                                    ''
                                    ], 
                                resources = [
                                    ''
                                    ], 
                                verbs = [
                                    ''
                                    ], )
                            ], 
                        subjects = [
                            kubernetes.client.models.v1beta3/subject.v1beta3.Subject(
                                group = kubernetes.client.models.v1beta3/group_subject.v1beta3.GroupSubject(
                                    name = '', ), 
                                kind = '', 
                                service_account = kubernetes.client.models.v1beta3/service_account_subject.v1beta3.ServiceAccountSubject(
                                    name = '', 
                                    namespace = '', ), 
                                user = kubernetes.client.models.v1beta3/user_subject.v1beta3.UserSubject(
                                    name = '', ), )
                            ], )
                    ]
            )
        else:
            return V1beta3FlowSchemaSpec(
                priority_level_configuration = kubernetes.client.models.v1beta3/priority_level_configuration_reference.v1beta3.PriorityLevelConfigurationReference(
                    name = '', ),
        )
        """

    def testV1beta3FlowSchemaSpec(self):
        """Test V1beta3FlowSchemaSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
