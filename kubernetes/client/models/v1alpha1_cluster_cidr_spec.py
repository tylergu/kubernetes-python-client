# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from kubernetes.client.models.v1_node_selector import V1NodeSelector
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha1ClusterCIDRSpec(BaseModel):
    """
    ClusterCIDRSpec defines the desired state of ClusterCIDR.
    """ # noqa: E501
    ipv4: Optional[StrictStr] = Field(default=None, description="IPv4 defines an IPv4 IP block in CIDR notation(e.g. \"10.0.0.0/8\"). At least one of IPv4 and IPv6 must be specified. This field is immutable.")
    ipv6: Optional[StrictStr] = Field(default=None, description="IPv6 defines an IPv6 IP block in CIDR notation(e.g. \"2001:db8::/64\"). At least one of IPv4 and IPv6 must be specified. This field is immutable.")
    node_selector: Optional[V1NodeSelector] = Field(default=None, alias="nodeSelector")
    per_node_host_bits: StrictInt = Field(description="PerNodeHostBits defines the number of host bits to be configured per node. A subnet mask determines how much of the address is used for network bits and host bits. For example an IPv4 address of 192.168.0.0/24, splits the address into 24 bits for the network portion and 8 bits for the host portion. To allocate 256 IPs, set this field to 8 (a /24 mask for IPv4 or a /120 for IPv6). Minimum value is 4 (16 IPs). This field is immutable.", alias="perNodeHostBits")
    __properties: ClassVar[List[str]] = ["ipv4", "ipv6", "nodeSelector", "perNodeHostBits"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha1ClusterCIDRSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node_selector
        if self.node_selector:
            _dict['nodeSelector'] = self.node_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha1ClusterCIDRSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipv4": obj.get("ipv4"),
            "ipv6": obj.get("ipv6"),
            "nodeSelector": V1NodeSelector.from_dict(obj.get("nodeSelector")) if obj.get("nodeSelector") is not None else None,
            "perNodeHostBits": obj.get("perNodeHostBits")
        })
        return _obj


