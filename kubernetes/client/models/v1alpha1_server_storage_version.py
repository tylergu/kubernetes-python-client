# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha1ServerStorageVersion(BaseModel):
    """
    An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
    """ # noqa: E501
    api_server_id: Optional[StrictStr] = Field(default=None, description="The ID of the reporting API server.", alias="apiServerID")
    decodable_versions: Optional[List[StrictStr]] = Field(default=None, description="The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.", alias="decodableVersions")
    encoding_version: Optional[StrictStr] = Field(default=None, description="The API server encodes the object to this version when persisting it in the backend (e.g., etcd).", alias="encodingVersion")
    served_versions: Optional[List[StrictStr]] = Field(default=None, description="The API server can serve these versions. DecodableVersions must include all ServedVersions.", alias="servedVersions")
    __properties: ClassVar[List[str]] = ["apiServerID", "decodableVersions", "encodingVersion", "servedVersions"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha1ServerStorageVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha1ServerStorageVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiServerID": obj.get("apiServerID"),
            "decodableVersions": obj.get("decodableVersions"),
            "encodingVersion": obj.get("encodingVersion"),
            "servedVersions": obj.get("servedVersions")
        })
        return _obj


