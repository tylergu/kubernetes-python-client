# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from kubernetes.client.models.v1_bound_object_reference import V1BoundObjectReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1TokenRequestSpec(BaseModel):
    """
    TokenRequestSpec contains client provided parameters of a token request.
    """ # noqa: E501
    audiences: List[StrictStr] = Field(description="Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.")
    bound_object_ref: Optional[V1BoundObjectReference] = Field(default=None, alias="boundObjectRef")
    expiration_seconds: Optional[StrictInt] = Field(default=None, description="ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.", alias="expirationSeconds")
    __properties: ClassVar[List[str]] = ["audiences", "boundObjectRef", "expirationSeconds"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1TokenRequestSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bound_object_ref
        if self.bound_object_ref:
            _dict['boundObjectRef'] = self.bound_object_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1TokenRequestSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audiences": obj.get("audiences"),
            "boundObjectRef": V1BoundObjectReference.from_dict(obj.get("boundObjectRef")) if obj.get("boundObjectRef") is not None else None,
            "expirationSeconds": obj.get("expirationSeconds")
        })
        return _obj


