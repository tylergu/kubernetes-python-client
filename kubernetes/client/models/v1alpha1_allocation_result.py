# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from kubernetes.client.models.v1_node_selector import V1NodeSelector
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha1AllocationResult(BaseModel):
    """
    AllocationResult contains attributed of an allocated resource.
    """ # noqa: E501
    available_on_nodes: Optional[V1NodeSelector] = Field(default=None, alias="availableOnNodes")
    resource_handle: Optional[StrictStr] = Field(default=None, description="ResourceHandle contains arbitrary data returned by the driver after a successful allocation. This is opaque for Kubernetes. Driver documentation may explain to users how to interpret this data if needed.  The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.", alias="resourceHandle")
    shareable: Optional[StrictBool] = Field(default=None, description="Shareable determines whether the resource supports more than one consumer at a time.")
    __properties: ClassVar[List[str]] = ["availableOnNodes", "resourceHandle", "shareable"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha1AllocationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available_on_nodes
        if self.available_on_nodes:
            _dict['availableOnNodes'] = self.available_on_nodes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha1AllocationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableOnNodes": V1NodeSelector.from_dict(obj.get("availableOnNodes")) if obj.get("availableOnNodes") is not None else None,
            "resourceHandle": obj.get("resourceHandle"),
            "shareable": obj.get("shareable")
        })
        return _obj


