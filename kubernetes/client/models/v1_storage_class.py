# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from kubernetes.client.models.v1_object_meta import V1ObjectMeta
from kubernetes.client.models.v1_topology_selector_term import V1TopologySelectorTerm
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1StorageClass(BaseModel):
    """
    StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.  StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
    """ # noqa: E501
    allow_volume_expansion: Optional[StrictBool] = Field(default=None, description="AllowVolumeExpansion shows whether the storage class allow volume expand", alias="allowVolumeExpansion")
    allowed_topologies: Optional[List[V1TopologySelectorTerm]] = Field(default=None, description="Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.", alias="allowedTopologies")
    api_version: Optional[StrictStr] = Field(default=None, description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources", alias="apiVersion")
    kind: Optional[StrictStr] = Field(default=None, description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    metadata: Optional[V1ObjectMeta] = None
    mount_options: Optional[List[StrictStr]] = Field(default=None, description="Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. [\"ro\", \"soft\"]. Not validated - mount of the PVs will simply fail if one is invalid.", alias="mountOptions")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Parameters holds the parameters for the provisioner that should create volumes of this storage class.")
    provisioner: StrictStr = Field(description="Provisioner indicates the type of the provisioner.")
    reclaim_policy: Optional[StrictStr] = Field(default=None, description="Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.", alias="reclaimPolicy")
    volume_binding_mode: Optional[StrictStr] = Field(default=None, description="VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.", alias="volumeBindingMode")
    __properties: ClassVar[List[str]] = ["allowVolumeExpansion", "allowedTopologies", "apiVersion", "kind", "metadata", "mountOptions", "parameters", "provisioner", "reclaimPolicy", "volumeBindingMode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1StorageClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_topologies (list)
        _items = []
        if self.allowed_topologies:
            for _item in self.allowed_topologies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedTopologies'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1StorageClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowVolumeExpansion": obj.get("allowVolumeExpansion"),
            "allowedTopologies": [V1TopologySelectorTerm.from_dict(_item) for _item in obj.get("allowedTopologies")] if obj.get("allowedTopologies") is not None else None,
            "apiVersion": obj.get("apiVersion"),
            "kind": obj.get("kind"),
            "metadata": V1ObjectMeta.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "mountOptions": obj.get("mountOptions"),
            "parameters": obj.get("parameters"),
            "provisioner": obj.get("provisioner"),
            "reclaimPolicy": obj.get("reclaimPolicy"),
            "volumeBindingMode": obj.get("volumeBindingMode")
        })
        return _obj


