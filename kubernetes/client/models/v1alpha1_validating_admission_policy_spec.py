# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from kubernetes.client.models.v1alpha1_match_resources import V1alpha1MatchResources
from kubernetes.client.models.v1alpha1_param_kind import V1alpha1ParamKind
from kubernetes.client.models.v1alpha1_validation import V1alpha1Validation
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha1ValidatingAdmissionPolicySpec(BaseModel):
    """
    ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.
    """ # noqa: E501
    failure_policy: Optional[StrictStr] = Field(default=None, description="FailurePolicy defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if spec.paramKind refers to a non-existent Kind. A binding is invalid if spec.paramRef.name refers to a non-existent resource. Allowed values are Ignore or Fail. Defaults to Fail.", alias="failurePolicy")
    match_constraints: Optional[V1alpha1MatchResources] = Field(default=None, alias="matchConstraints")
    param_kind: Optional[V1alpha1ParamKind] = Field(default=None, alias="paramKind")
    validations: List[V1alpha1Validation] = Field(description="Validations contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. Required.")
    __properties: ClassVar[List[str]] = ["failurePolicy", "matchConstraints", "paramKind", "validations"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha1ValidatingAdmissionPolicySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of match_constraints
        if self.match_constraints:
            _dict['matchConstraints'] = self.match_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of param_kind
        if self.param_kind:
            _dict['paramKind'] = self.param_kind.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validations (list)
        _items = []
        if self.validations:
            for _item in self.validations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha1ValidatingAdmissionPolicySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failurePolicy": obj.get("failurePolicy"),
            "matchConstraints": V1alpha1MatchResources.from_dict(obj.get("matchConstraints")) if obj.get("matchConstraints") is not None else None,
            "paramKind": V1alpha1ParamKind.from_dict(obj.get("paramKind")) if obj.get("paramKind") is not None else None,
            "validations": [V1alpha1Validation.from_dict(_item) for _item in obj.get("validations")] if obj.get("validations") is not None else None
        })
        return _obj


