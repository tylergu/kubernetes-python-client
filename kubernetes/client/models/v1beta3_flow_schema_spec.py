# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from kubernetes.client.models.v1beta3_flow_distinguisher_method import V1beta3FlowDistinguisherMethod
from kubernetes.client.models.v1beta3_policy_rules_with_subjects import V1beta3PolicyRulesWithSubjects
from kubernetes.client.models.v1beta3_priority_level_configuration_reference import V1beta3PriorityLevelConfigurationReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1beta3FlowSchemaSpec(BaseModel):
    """
    FlowSchemaSpec describes how the FlowSchema's specification looks like.
    """ # noqa: E501
    distinguisher_method: Optional[V1beta3FlowDistinguisherMethod] = Field(default=None, alias="distinguisherMethod")
    matching_precedence: Optional[StrictInt] = Field(default=None, description="`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.", alias="matchingPrecedence")
    priority_level_configuration: V1beta3PriorityLevelConfigurationReference = Field(alias="priorityLevelConfiguration")
    rules: Optional[List[V1beta3PolicyRulesWithSubjects]] = Field(default=None, description="`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.")
    __properties: ClassVar[List[str]] = ["distinguisherMethod", "matchingPrecedence", "priorityLevelConfiguration", "rules"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1beta3FlowSchemaSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distinguisher_method
        if self.distinguisher_method:
            _dict['distinguisherMethod'] = self.distinguisher_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority_level_configuration
        if self.priority_level_configuration:
            _dict['priorityLevelConfiguration'] = self.priority_level_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1beta3FlowSchemaSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "distinguisherMethod": V1beta3FlowDistinguisherMethod.from_dict(obj.get("distinguisherMethod")) if obj.get("distinguisherMethod") is not None else None,
            "matchingPrecedence": obj.get("matchingPrecedence"),
            "priorityLevelConfiguration": V1beta3PriorityLevelConfigurationReference.from_dict(obj.get("priorityLevelConfiguration")) if obj.get("priorityLevelConfiguration") is not None else None,
            "rules": [V1beta3PolicyRulesWithSubjects.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None
        })
        return _obj


