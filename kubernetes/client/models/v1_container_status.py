# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from kubernetes.client.models.v1_container_state import V1ContainerState
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1ContainerStatus(BaseModel):
    """
    ContainerStatus contains details for the current status of this container.
    """ # noqa: E501
    container_id: Optional[StrictStr] = Field(default=None, description="Container's ID in the format '<type>://<container_id>'.", alias="containerID")
    image: StrictStr = Field(description="The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.")
    image_id: StrictStr = Field(description="ImageID of the container's image.", alias="imageID")
    last_state: Optional[V1ContainerState] = Field(default=None, alias="lastState")
    name: StrictStr = Field(description="This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.")
    ready: StrictBool = Field(description="Specifies whether the container has passed its readiness probe.")
    restart_count: StrictInt = Field(description="The number of times the container has been restarted.", alias="restartCount")
    started: Optional[StrictBool] = Field(default=None, description="Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.")
    state: Optional[V1ContainerState] = None
    __properties: ClassVar[List[str]] = ["containerID", "image", "imageID", "lastState", "name", "ready", "restartCount", "started", "state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1ContainerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_state
        if self.last_state:
            _dict['lastState'] = self.last_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1ContainerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerID": obj.get("containerID"),
            "image": obj.get("image"),
            "imageID": obj.get("imageID"),
            "lastState": V1ContainerState.from_dict(obj.get("lastState")) if obj.get("lastState") is not None else None,
            "name": obj.get("name"),
            "ready": obj.get("ready"),
            "restartCount": obj.get("restartCount"),
            "started": obj.get("started"),
            "state": V1ContainerState.from_dict(obj.get("state")) if obj.get("state") is not None else None
        })
        return _obj


